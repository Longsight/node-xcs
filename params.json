{"name":"Node-xcs","tagline":"NodeJS implementation of Google's XMPP Connection Server","body":"Getting Started\r\n===============\r\nInstall via\r\n```\r\nnpm install git+https://github.com/sainaetr/node-xcs.git\r\n```\r\n\r\nUse via\r\n```js\r\nvar XCS = require('node-xcs');\r\nvar xcs = XCS(<project number>, <api key>);\r\n```\r\n\r\nFunctions\r\n=========\r\nSend Message\r\n------------\r\nUse `send` to send a message.\r\n```js\r\nxcs.send(to, data, [options, callback(error, messageId, to)]);\r\n```\r\nArgument            | Details\r\n------------------- | -------\r\nto                  | A single user\r\ndata                | Data to be sent to the client\r\noptions (optional)  | See _Message Paremeters_ from https://developer.android.com/google/gcm/server.html#send-msg. If `delivery_receipt_requested = true`, an event will be sent when the message is received by the target.\r\ncallback (optional) | `function(error, messageId, to)` called back individually for each target.\r\n\r\nEnd Connection\r\n--------------\r\n```\r\nxcs.end;\r\n```\r\n\r\nEvents\r\n======\r\nEvents are defined as below.\r\n```js\r\nxcs.on('message', function(messageId, from, category, data)); // Messages received from client (excluding receipts)\r\nxcs.on('receipt', function(messageId, from, category, data)); // Only fired for messages where options.delivery_receipt_requested = true\r\n\r\nxcs.on('connected', console.log);\r\nxcs.on('disconnected', console.log);\r\nxcs.on('online', console.log);\r\nxcs.on('error', console.log);\r\n```\r\n\r\nExample\r\n=======\r\n```js\r\nvar XCS = require('node-xcs');\r\nvar xcs = XCS(<project id>, <api key>);\r\n\r\nxcs.on('message', function(messageId, from, category, data) {\r\n\tconsole.log('received message', arguments);\r\n});\r\n\r\nxcs.on('receipt', function(messageId, from, category, data) {\r\n\tconsole.log('received receipt', arguments);\r\n});\r\n\r\nxcs.send(<device id>, { message: 'hello world' }, { delivery_receipt_requested: true }, function(err, messageId, to) {\r\n\tif (!err) {\r\n\t\tconsole.log('sent message to', to, 'with message_id =', messageId);\r\n\t} else {\r\n\t\tconsole.log('failed to send message');\r\n\t}\r\n});\r\n```\r\nEcho Client\r\n-----------\r\n```js\r\nxcs.on('message', function(_, from, __, data) {\r\n\txcs.send(from, data);\r\n});\r\n```\r\n\r\nNotes on XCS\r\n============\r\n* No events are emitted from XCS or this library when a device new registers: you'll have to send a message from the device and process it yourself\r\n* This library doesn't have functions (yet) to create user notifications (https://developer.android.com/google/gcm/notifications.html). However, if you implement this yourself, you'll be able to send to a user group by passing the `notification_key_name` as a `device_id` for `xcs.send`.\r\n* Occasionally, GCM performs load balancing, so the connection is sometimes restarted. This library handles this transparently, and your messages will be queued in these situations.\r\n* This library auto sends acks for receipts of sent messages, however google side receipts are not fully reliable\r\n\r\nDisclaimer\r\n-----------\r\nBased on a work at https://github.com/jacobp100/node-gcm-ccs\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}